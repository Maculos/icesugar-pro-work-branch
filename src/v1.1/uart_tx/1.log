yosys -p "synth_ecp5 -json uart_tx.json" top.v

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3672 (git sha1 924f1713, gcc 8.3.0-6+rpi1 -fPIC -Os)


-- Parsing `top.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: top.v
Parsing Verilog input from `top.v' to AST representation.
Generating RTLIL representation for module `\uart_tx_8n1'.
Generating RTLIL representation for module `\top'.
top.v:62: Warning: Identifier `\LED' is implicitly declared.
Successfully finished Verilog frontend.

-- Running command `synth_ecp5 -json uart_tx.json' --

2. Executing SYNTH_ECP5 pass.

2.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\$__ABC9_LUT5'.
Generating RTLIL representation for module `\$__ABC9_LUT6'.
Generating RTLIL representation for module `\$__ABC9_LUT7'.
Generating RTLIL representation for module `\L6MUX21'.
Generating RTLIL representation for module `\CCU2C'.
Generating RTLIL representation for module `\TRELLIS_RAM16X2'.
Generating RTLIL representation for module `\PFUMX'.
Generating RTLIL representation for module `\TRELLIS_DPR16X4'.
Generating RTLIL representation for module `\DPR16X4C'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\TRELLIS_FF'.
Generating RTLIL representation for module `\TRELLIS_IO'.
Generating RTLIL representation for module `\INV'.
Generating RTLIL representation for module `\TRELLIS_SLICE'.
Generating RTLIL representation for module `\DP16KD'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Successfully finished Verilog frontend.

2.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_bb.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_bb.v' to AST representation.
Generating RTLIL representation for module `\MULT18X18D'.
Generating RTLIL representation for module `\ALU54B'.
Generating RTLIL representation for module `\EHXPLLL'.
Generating RTLIL representation for module `\DTR'.
Generating RTLIL representation for module `\OSCG'.
Generating RTLIL representation for module `\USRMCLK'.
Generating RTLIL representation for module `\JTAGG'.
Generating RTLIL representation for module `\DELAYF'.
Generating RTLIL representation for module `\DELAYG'.
Generating RTLIL representation for module `\IDDRX1F'.
Generating RTLIL representation for module `\IDDRX2F'.
Generating RTLIL representation for module `\IDDR71B'.
Generating RTLIL representation for module `\IDDRX2DQA'.
Generating RTLIL representation for module `\ODDRX1F'.
Generating RTLIL representation for module `\ODDRX2F'.
Generating RTLIL representation for module `\ODDR71B'.
Generating RTLIL representation for module `\OSHX2A'.
Generating RTLIL representation for module `\ODDRX2DQA'.
Generating RTLIL representation for module `\ODDRX2DQSB'.
Generating RTLIL representation for module `\TSHX2DQA'.
Generating RTLIL representation for module `\TSHX2DQSA'.
Generating RTLIL representation for module `\DQSBUFM'.
Generating RTLIL representation for module `\DDRDLLA'.
Generating RTLIL representation for module `\CLKDIVF'.
Generating RTLIL representation for module `\ECLKSYNCB'.
Generating RTLIL representation for module `\ECLKBRIDGECS'.
Generating RTLIL representation for module `\DCCA'.
Generating RTLIL representation for module `\DCUA'.
Generating RTLIL representation for module `\EXTREFB'.
Generating RTLIL representation for module `\PCSCLKDIV'.
Generating RTLIL representation for module `\PUR'.
Generating RTLIL representation for module `\GSR'.
Generating RTLIL representation for module `\SGSR'.
Generating RTLIL representation for module `\PDPW16KD'.
Successfully finished Verilog frontend.

2.3. Executing HIERARCHY pass (managing design hierarchy).

2.3.1. Finding top of design hierarchy..
root of   1 design levels: top                 
root of   0 design levels: uart_tx_8n1         
Automatically selected top as design top module.

2.3.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \uart_tx_8n1

2.3.3. Analyzing design hierarchy..
Top module:  \top
Used module:     \uart_tx_8n1
Removed 0 unused modules.

2.4. Executing PROC pass (convert processes to netlists).

2.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$182'.
Cleaned up 1 empty switch.

2.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$262 in module TRELLIS_FF.
Marked 1 switch rules as full_case in process $proc$top.v:82$26 in module top.
Marked 2 switch rules as full_case in process $proc$uart_tx.v:37$1 in module uart_tx_8n1.
Removed a total of 0 dead cases.

2.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 19 assignments to connections.

2.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$266'.
  Set init value: \Q = 1'0
Found init rule in `\top.$proc$top.v:43$36'.
  Set init value: \ledval = 1'0
Found init rule in `\top.$proc$top.v:38$34'.
  Set init value: \uart_txbyte = 8'00110000
Found init rule in `\top.$proc$top.v:29$33'.
  Set init value: \cntr_1 = 0
Found init rule in `\top.$proc$top.v:28$32'.
  Set init value: \clk_1 = 1'0
Found init rule in `\top.$proc$top.v:23$31'.
  Set init value: \cntr_9600 = 0
Found init rule in `\top.$proc$top.v:22$30'.
  Set init value: \clk_9600 = 1'0
Found init rule in `\uart_tx_8n1.$proc$uart_tx.v:31$18'.
  Set init value: \txdone = 1'0
Found init rule in `\uart_tx_8n1.$proc$uart_tx.v:30$17'.
  Set init value: \txbit = 1'1
Found init rule in `\uart_tx_8n1.$proc$uart_tx.v:29$16'.
  Set init value: \bits_sent = 8'00000000
Found init rule in `\uart_tx_8n1.$proc$uart_tx.v:28$15'.
  Set init value: \buf_tx = 8'00000000
Found init rule in `\uart_tx_8n1.$proc$uart_tx.v:27$14'.
  Set init value: \state = 8'00000000

2.4.5. Executing PROC_ARST pass (detect async resets in processes).

2.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$266'.
Creating decoders for process `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$262'.
     1/1: $0\Q[0:0]
Creating decoders for process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$259'.
Creating decoders for process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$238'.
     1/3: $0$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$237_EN[3:0]$241
     2/3: $0$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$237_DATA[3:0]$240
     3/3: $0$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$237_ADDR[3:0]$239
Creating decoders for process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$205'.
Creating decoders for process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$183'.
     1/3: $0$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$181_EN[3:0]$186
     2/3: $0$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$181_DATA[3:0]$185
     3/3: $0$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$181_ADDR[3:0]$184
Creating decoders for process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$182'.
Creating decoders for process `\top.$proc$top.v:43$36'.
Creating decoders for process `\top.$proc$top.v:39$35'.
Creating decoders for process `\top.$proc$top.v:38$34'.
Creating decoders for process `\top.$proc$top.v:29$33'.
Creating decoders for process `\top.$proc$top.v:28$32'.
Creating decoders for process `\top.$proc$top.v:23$31'.
Creating decoders for process `\top.$proc$top.v:22$30'.
Creating decoders for process `\top.$proc$top.v:82$26'.
     1/1: $0\uart_txbyte[7:0]
Creating decoders for process `\top.$proc$top.v:65$19'.
     1/4: $0\cntr_1[31:0]
     2/4: $0\cntr_9600[31:0]
     3/4: $0\clk_1[0:0]
     4/4: $0\clk_9600[0:0]
Creating decoders for process `\uart_tx_8n1.$proc$uart_tx.v:31$18'.
Creating decoders for process `\uart_tx_8n1.$proc$uart_tx.v:30$17'.
Creating decoders for process `\uart_tx_8n1.$proc$uart_tx.v:29$16'.
Creating decoders for process `\uart_tx_8n1.$proc$uart_tx.v:28$15'.
Creating decoders for process `\uart_tx_8n1.$proc$uart_tx.v:27$14'.
Creating decoders for process `\uart_tx_8n1.$proc$uart_tx.v:37$1'.
     1/5: $1\bits_sent[7:0]
     2/5: $0\txbit[0:0]
     3/5: $0\buf_tx[7:0]
     4/5: $0\state[7:0]
     5/5: $0\txdone[0:0]

2.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\top.\uart_send' from process `\top.$proc$top.v:39$35'.

2.4.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\TRELLIS_FF.\Q' using process `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$262'.
  created $dff cell `$procdff$337' with positive edge clock.
Creating register for signal `\DPR16X4C.\i' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$259'.
  created direct connection (no actual register cell created).
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$237_ADDR' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$238'.
  created $dff cell `$procdff$338' with positive edge clock.
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$237_DATA' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$238'.
  created $dff cell `$procdff$339' with positive edge clock.
Creating register for signal `\DPR16X4C.$memwr$\ram$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:287$237_EN' using process `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$238'.
  created $dff cell `$procdff$340' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.\i' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$205'.
  created direct connection (no actual register cell created).
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$181_ADDR' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$183'.
  created $dff cell `$procdff$341' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$181_DATA' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$183'.
  created $dff cell `$procdff$342' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.$memwr$\mem$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:223$181_EN' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$183'.
  created $dff cell `$procdff$343' with positive edge clock.
Creating register for signal `\TRELLIS_DPR16X4.\muxwre' using process `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$182'.
  created direct connection (no actual register cell created).
Creating register for signal `\top.\uart_txbyte' using process `\top.$proc$top.v:82$26'.
  created $dff cell `$procdff$344' with positive edge clock.
Creating register for signal `\top.\ledval' using process `\top.$proc$top.v:82$26'.
  created $dff cell `$procdff$345' with positive edge clock.
Creating register for signal `\top.\clk_9600' using process `\top.$proc$top.v:65$19'.
  created $dff cell `$procdff$346' with positive edge clock.
Creating register for signal `\top.\cntr_9600' using process `\top.$proc$top.v:65$19'.
  created $dff cell `$procdff$347' with positive edge clock.
Creating register for signal `\top.\clk_1' using process `\top.$proc$top.v:65$19'.
  created $dff cell `$procdff$348' with positive edge clock.
Creating register for signal `\top.\cntr_1' using process `\top.$proc$top.v:65$19'.
  created $dff cell `$procdff$349' with positive edge clock.
Creating register for signal `\uart_tx_8n1.\txdone' using process `\uart_tx_8n1.$proc$uart_tx.v:37$1'.
  created $dff cell `$procdff$350' with positive edge clock.
Creating register for signal `\uart_tx_8n1.\state' using process `\uart_tx_8n1.$proc$uart_tx.v:37$1'.
  created $dff cell `$procdff$351' with positive edge clock.
Creating register for signal `\uart_tx_8n1.\buf_tx' using process `\uart_tx_8n1.$proc$uart_tx.v:37$1'.
  created $dff cell `$procdff$352' with positive edge clock.
Creating register for signal `\uart_tx_8n1.\bits_sent' using process `\uart_tx_8n1.$proc$uart_tx.v:37$1'.
  created $dff cell `$procdff$353' with positive edge clock.
Creating register for signal `\uart_tx_8n1.\txbit' using process `\uart_tx_8n1.$proc$uart_tx.v:37$1'.
  created $dff cell `$procdff$354' with positive edge clock.

2.4.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$266'.
Found and cleaned up 2 empty switches in `\TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$262'.
Removing empty process `TRELLIS_FF.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:350$262'.
Removing empty process `DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$259'.
Found and cleaned up 1 empty switch in `\DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$238'.
Removing empty process `DPR16X4C.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:285$238'.
Removing empty process `TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:0$205'.
Found and cleaned up 1 empty switch in `\TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$183'.
Removing empty process `TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:221$183'.
Removing empty process `TRELLIS_DPR16X4.$proc$/usr/local/bin/../share/yosys/ecp5/cells_sim.v:213$182'.
Removing empty process `top.$proc$top.v:43$36'.
Removing empty process `top.$proc$top.v:39$35'.
Removing empty process `top.$proc$top.v:38$34'.
Removing empty process `top.$proc$top.v:29$33'.
Removing empty process `top.$proc$top.v:28$32'.
Removing empty process `top.$proc$top.v:23$31'.
Removing empty process `top.$proc$top.v:22$30'.
Found and cleaned up 1 empty switch in `\top.$proc$top.v:82$26'.
Removing empty process `top.$proc$top.v:82$26'.
Found and cleaned up 2 empty switches in `\top.$proc$top.v:65$19'.
Removing empty process `top.$proc$top.v:65$19'.
Removing empty process `uart_tx_8n1.$proc$uart_tx.v:31$18'.
Removing empty process `uart_tx_8n1.$proc$uart_tx.v:30$17'.
Removing empty process `uart_tx_8n1.$proc$uart_tx.v:29$16'.
Removing empty process `uart_tx_8n1.$proc$uart_tx.v:28$15'.
Removing empty process `uart_tx_8n1.$proc$uart_tx.v:27$14'.
Found and cleaned up 6 empty switches in `\uart_tx_8n1.$proc$uart_tx.v:37$1'.
Removing empty process `uart_tx_8n1.$proc$uart_tx.v:37$1'.
Cleaned up 13 empty switches.

2.5. Executing FLATTEN pass (flatten design).
Deleting now unused module uart_tx_8n1.
<suppressed ~1 debug messages>

2.6. Executing TRIBUF pass.

2.7. Executing DEMINOUT pass (demote inout ports to input or output).

2.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~5 debug messages>

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 6 unused cells and 53 unused wires.
<suppressed ~7 debug messages>

2.10. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $flatten\transmitter.$procmux$300.
Removed 1 multiplexer ports.
<suppressed ~10 debug messages>

2.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New ctrl vector for $mux cell $flatten\transmitter.$procmux$303: { }
  Optimizing cells in module \top.
Performed a total of 1 changes.

2.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.11.6. Executing OPT_DFF pass (perform DFF optimizations).

2.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

2.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.11.9. Rerunning OPT passes. (Maybe there is more to do..)

2.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

2.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.11.13. Executing OPT_DFF pass (perform DFF optimizations).

2.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.11.16. Finished OPT passes. (There is nothing left to do.)

2.12. Executing FSM pass (extract and optimize FSM).

2.12.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking top.transmitter.state as FSM state register:
    Register has an initialization value.

2.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

2.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$349 ($dff) from module top (D = $add$top.v:74$23_Y, Q = \cntr_1, rval = 0).
Adding EN signal on $procdff$348 ($dff) from module top (D = $not$top.v:76$25_Y, Q = \clk_1).
Adding SRST signal on $procdff$347 ($dff) from module top (D = $add$top.v:67$20_Y, Q = \cntr_9600, rval = 0).
Adding EN signal on $procdff$346 ($dff) from module top (D = $not$top.v:69$22_Y, Q = \clk_9600).
Adding SRST signal on $procdff$344 ($dff) from module top (D = $add$top.v:87$29_Y [7:0], Q = \uart_txbyte, rval = 8'00110000).
Adding EN signal on $flatten\transmitter.$procdff$354 ($dff) from module top (D = $flatten\transmitter.$0\txbit[0:0], Q = \transmitter.txbit).
Adding EN signal on $flatten\transmitter.$procdff$353 ($dff) from module top (D = $flatten\transmitter.$0\bits_sent[7:0], Q = \transmitter.bits_sent).
Adding SRST signal on $flatten\transmitter.$procdff$352 ($dff) from module top (D = $flatten\transmitter.$procmux$313_Y [7], Q = \transmitter.buf_tx [7], rval = 1'0).
Adding EN signal on $flatten\transmitter.$procdff$352 ($dff) from module top (D = $flatten\transmitter.$0\buf_tx[7:0] [6:0], Q = \transmitter.buf_tx [6:0]).
Adding EN signal on $auto$opt_dff.cc:702:run$366 ($sdff) from module top (D = \uart_txbyte [7], Q = \transmitter.buf_tx [7]).
Adding SRST signal on $flatten\transmitter.$procdff$351 ($dff) from module top (D = $flatten\transmitter.$procmux$326_Y, Q = \transmitter.state, rval = 8'00000000).

2.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 6 unused cells and 6 unused wires.
<suppressed ~7 debug messages>

2.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~3 debug messages>

2.13.9. Rerunning OPT passes. (Maybe there is more to do..)

2.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

2.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.13. Executing OPT_DFF pass (perform DFF optimizations).

2.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.13.16. Finished OPT passes. (There is nothing left to do.)

2.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell top.$add$top.v:67$20 ($add).
Removed top 21 bits (of 32) from port B of cell top.$eq$top.v:68$21 ($eq).
Removed top 31 bits (of 32) from port B of cell top.$add$top.v:74$23 ($add).
Removed top 8 bits (of 32) from port B of cell top.$eq$top.v:75$24 ($eq).
Removed top 2 bits (of 8) from port B of cell top.$eq$top.v:84$28 ($eq).
Removed top 31 bits (of 32) from port B of cell top.$add$top.v:87$29 ($add).
Removed top 24 bits (of 32) from port Y of cell top.$add$top.v:87$29 ($add).
Removed top 1 bits (of 8) from mux cell top.$flatten\transmitter.$procmux$316 ($mux).
Removed cell top.$flatten\transmitter.$procmux$313 ($mux).
Removed cell top.$flatten\transmitter.$procmux$305 ($mux).
Removed cell top.$flatten\transmitter.$procmux$295 ($mux).
Removed top 6 bits (of 8) from port B of cell top.$flatten\transmitter.$eq$uart_tx.v:67$13 ($eq).
Removed top 31 bits (of 32) from port B of cell top.$flatten\transmitter.$add$uart_tx.v:58$11 ($add).
Removed top 24 bits (of 32) from port Y of cell top.$flatten\transmitter.$add$uart_tx.v:58$11 ($add).
Removed top 4 bits (of 8) from port B of cell top.$flatten\transmitter.$lt$uart_tx.v:55$8 ($lt).
Removed top 6 bits (of 8) from port B of cell top.$flatten\transmitter.$eq$uart_tx.v:55$7 ($eq).
Removed top 7 bits (of 8) from port B of cell top.$flatten\transmitter.$eq$uart_tx.v:50$6 ($eq).
Removed top 24 bits (of 32) from wire top.$add$top.v:87$29_Y.
Removed top 1 bits (of 8) from wire top.$flatten\transmitter.$procmux$313_Y.

2.15. Executing PEEPOPT pass (run peephole optimizers).

2.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

2.17. Executing SHARE pass (SAT-based resource sharing).

2.18. Executing TECHMAP pass (map to technology primitives).

2.18.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.18.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~36 debug messages>

2.19. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

2.21.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/dsp_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__MUL18X18'.
Successfully finished Verilog frontend.

2.21.3. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

2.22. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $add$top.v:67$20 ($add).
  creating $macc model for $add$top.v:74$23 ($add).
  creating $macc model for $add$top.v:87$29 ($add).
  creating $macc model for $flatten\transmitter.$add$uart_tx.v:58$11 ($add).
  creating $alu model for $macc $flatten\transmitter.$add$uart_tx.v:58$11.
  creating $alu model for $macc $add$top.v:87$29.
  creating $alu model for $macc $add$top.v:74$23.
  creating $alu model for $macc $add$top.v:67$20.
  creating $alu model for $flatten\transmitter.$lt$uart_tx.v:55$8 ($lt): new $alu
  creating $alu cell for $flatten\transmitter.$lt$uart_tx.v:55$8: $auto$alumacc.cc:485:replace_alu$375
  creating $alu cell for $add$top.v:67$20: $auto$alumacc.cc:485:replace_alu$386
  creating $alu cell for $add$top.v:74$23: $auto$alumacc.cc:485:replace_alu$389
  creating $alu cell for $add$top.v:87$29: $auto$alumacc.cc:485:replace_alu$392
  creating $alu cell for $flatten\transmitter.$add$uart_tx.v:58$11: $auto$alumacc.cc:485:replace_alu$395
  created 5 $alu and 0 $macc cells.

2.23. Executing OPT pass (performing simple optimizations).

2.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.23.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

2.23.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.23.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.23.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$opt_dff.cc:764:run$365 ($dffe) from module top (D = $flatten\transmitter.$add$uart_tx.v:58$11_Y [7:0], Q = \transmitter.bits_sent, rval = 8'00000000).

2.23.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

2.23.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.23.9. Rerunning OPT passes. (Maybe there is more to do..)

2.23.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

2.23.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.23.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.23.13. Executing OPT_DFF pass (perform DFF optimizations).

2.23.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.23.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.23.16. Finished OPT passes. (There is nothing left to do.)

2.24. Executing MEMORY pass.

2.24.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.24.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.24.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.24.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.24.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.24.6. Executing MEMORY_COLLECT pass (generating $mem cells).

2.25. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.26. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.27. Executing TECHMAP pass (map to technology primitives).

2.27.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ECP5_DP16KD'.
Generating RTLIL representation for module `\$__ECP5_PDPW16KD'.
Successfully finished Verilog frontend.

2.27.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

2.28. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.29. Executing TECHMAP pass (map to technology primitives).

2.29.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/lutrams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/lutrams_map.v' to AST representation.
Generating RTLIL representation for module `\$__TRELLIS_DPR16X4'.
Successfully finished Verilog frontend.

2.29.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

2.30. Executing OPT pass (performing simple optimizations).

2.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~5 debug messages>

2.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.30.3. Executing OPT_DFF pass (perform DFF optimizations).

2.30.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.30.5. Finished fast OPT passes.

2.31. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.32. Executing OPT pass (performing simple optimizations).

2.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

2.32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.32.6. Executing OPT_DFF pass (perform DFF optimizations).

2.32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.32.9. Finished OPT passes. (There is nothing left to do.)

2.33. Executing TECHMAP pass (map to technology primitives).

2.33.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.33.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ecp5_alu'.
Successfully finished Verilog frontend.

2.33.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $dffe.
Using template $paramod\_80_ecp5_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $sdffce.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~363 debug messages>

2.34. Executing OPT pass (performing simple optimizations).

2.34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~517 debug messages>

2.34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~144 debug messages>
Removed a total of 48 cells.

2.34.3. Executing OPT_DFF pass (perform DFF optimizations).

2.34.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 95 unused cells and 298 unused wires.
<suppressed ~96 debug messages>

2.34.5. Finished fast OPT passes.

2.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.36. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

2.37. Executing TECHMAP pass (map to technology primitives).

2.37.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFFE_NP0N_'.
Generating RTLIL representation for module `\$_SDFFE_NP1N_'.
Generating RTLIL representation for module `\$_SDFFE_PP0N_'.
Generating RTLIL representation for module `\$_SDFFE_PP1N_'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Successfully finished Verilog frontend.

2.37.2. Continuing TECHMAP pass.
Using template $paramod\$_DFFE_PN_\_TECHMAP_WIREINIT_Q_=1'0 for cells of type $_DFFE_PN_.
Using template \$_SDFF_PP0_ for cells of type $_SDFF_PP0_.
Using template $paramod\$_DFFE_PP_\_TECHMAP_WIREINIT_Q_=1'1 for cells of type $_DFFE_PP_.
Using template \$_SDFFE_PP0N_ for cells of type $_SDFFE_PP0N_.
Using template \$_SDFFE_PP0P_ for cells of type $_SDFFE_PP0P_.
Using template $paramod\$_DFFE_PP_\_TECHMAP_WIREINIT_Q_=1'0 for cells of type $_DFFE_PP_.
Using template \$_SDFF_PP1_ for cells of type $_SDFF_PP1_.
No more expansions possible.
<suppressed ~197 debug messages>

2.38. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.39. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.40. Executing ECP5_GSR pass (implement FF init values).
Handling GSR in top.

2.41. Executing ATTRMVCP pass (move or copy attributes).

2.42. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 504 unused wires.
<suppressed ~1 debug messages>

2.43. Executing TECHMAP pass (map to technology primitives).

2.43.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.43.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

2.44. Executing ABC pass (technology mapping using ABC).

2.44.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 270 gates and 371 wires to a netlist network with 99 inputs and 113 outputs.

2.44.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + dress 
ABC: Total number of equiv classes                =      28.
ABC: Participating nodes from both networks       =      80.
ABC: Participating nodes from the first network   =      27. (  19.29 % of nodes)
ABC: Participating nodes from the second network  =      53. (  37.86 % of nodes)
ABC: Node pairs (any polarity)                    =      27. (  19.29 % of names can be moved)
ABC: Node pairs (same polarity)                   =      25. (  17.86 % of names can be moved)
ABC: Total runtime =     0.01 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.44.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      139
ABC RESULTS:        internal signals:      159
ABC RESULTS:           input signals:       99
ABC RESULTS:          output signals:      113
Removing temp directory.
Removed 0 unused cells and 278 unused wires.

2.45. Executing TECHMAP pass (map to technology primitives).

2.45.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ecp5/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ecp5/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_SDFFE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFFE_NP0N_'.
Generating RTLIL representation for module `\$_SDFFE_NP1N_'.
Generating RTLIL representation for module `\$_SDFFE_PP0N_'.
Generating RTLIL representation for module `\$_SDFFE_PP1N_'.
Generating RTLIL representation for module `\FD1P3AX'.
Generating RTLIL representation for module `\FD1P3AY'.
Generating RTLIL representation for module `\FD1P3BX'.
Generating RTLIL representation for module `\FD1P3DX'.
Generating RTLIL representation for module `\FD1P3IX'.
Generating RTLIL representation for module `\FD1P3JX'.
Generating RTLIL representation for module `\FD1S3AX'.
Generating RTLIL representation for module `\FD1S3AY'.
Generating RTLIL representation for module `\FD1S3BX'.
Generating RTLIL representation for module `\FD1S3DX'.
Generating RTLIL representation for module `\FD1S3IX'.
Generating RTLIL representation for module `\FD1S3JX'.
Generating RTLIL representation for module `\IFS1P3BX'.
Generating RTLIL representation for module `\IFS1P3DX'.
Generating RTLIL representation for module `\IFS1P3IX'.
Generating RTLIL representation for module `\IFS1P3JX'.
Generating RTLIL representation for module `\OFS1P3BX'.
Generating RTLIL representation for module `\OFS1P3DX'.
Generating RTLIL representation for module `\OFS1P3IX'.
Generating RTLIL representation for module `\OFS1P3JX'.
Generating RTLIL representation for module `\IB'.
Generating RTLIL representation for module `\IBPU'.
Generating RTLIL representation for module `\IBPD'.
Generating RTLIL representation for module `\OB'.
Generating RTLIL representation for module `\OBZ'.
Generating RTLIL representation for module `\OBZPU'.
Generating RTLIL representation for module `\OBZPD'.
Generating RTLIL representation for module `\OBCO'.
Generating RTLIL representation for module `\BB'.
Generating RTLIL representation for module `\BBPU'.
Generating RTLIL representation for module `\BBPD'.
Generating RTLIL representation for module `\ILVDS'.
Generating RTLIL representation for module `\OLVDS'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.45.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10111111111111111000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=268435456 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'10000000000000000000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=32'11001111111111110111000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=5\LUT=65536 for cells of type $lut.
No more expansions possible.
<suppressed ~478 debug messages>

2.46. Executing OPT_LUT_INS pass (discard unused LUT inputs).
Optimizing LUTs in top.
  Optimizing lut $abc$1801$auto$blifparse.cc:498:parse_blif$1838.lut1 (4 -> 3)
  Optimizing lut $abc$1801$auto$blifparse.cc:498:parse_blif$1811.lut0 (4 -> 0)
  Optimizing lut $abc$1801$auto$blifparse.cc:498:parse_blif$1814.lut0 (4 -> 0)
  Optimizing lut $abc$1801$auto$blifparse.cc:498:parse_blif$1824.lut0 (4 -> 0)
Removed 0 unused cells and 268 unused wires.

2.47. Executing AUTONAME pass.
Renamed 1385 objects in module top (19 iterations).
<suppressed ~438 debug messages>

2.48. Executing HIERARCHY pass (managing design hierarchy).

2.48.1. Analyzing design hierarchy..
Top module:  \top

2.48.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

2.49. Printing statistics.

=== top ===

   Number of wires:                167
   Number of wire bits:            547
   Number of public wires:         167
   Number of public wire bits:     547
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                291
     CCU2C                          44
     LUT4                          137
     PFUMX                          11
     TRELLIS_FF                     99

2.50. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

2.51. Executing JSON backend.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 4f39b6b87f, CPU: user 3.17s system 0.46s, MEM: 195.29 MB peak
Yosys 0.9+3672 (git sha1 924f1713, gcc 8.3.0-6+rpi1 -fPIC -Os)
Time spent: 52% 14x read_verilog (2 sec), 9% 1x abc (0 sec), ...
nextpnr-ecp5 --25k --package CABGA256 --speed 6 --json uart_tx.json --textcfg uart_tx_out.config --lpf top.lpf --freq 65
Info: constraining clock net 'clk_i' to 25.00 MHz

Info: Logic utilisation before packing:
Info:     Total LUT4s:       225/24288     0%
Info:         logic LUTs:    137/24288     0%
Info:         carry LUTs:     88/24288     0%
Info:           RAM LUTs:      0/12144     0%
Info:          RAMW LUTs:      0/ 6072     0%

Info:      Total DFFs:       198/24288     0%

Info: Packing IOs..
Info: pin 'TX$tr_io' constrained to Bel 'X11/Y0/PIOB'.
Info: pin 'clk_i$tr_io' constrained to Bel 'X0/Y47/PIOC'.
Info: Packing constants..
Info: Packing carries...
Info: Finding LUTFF pairs...
Info: Packing LUT5-7s...
Info: Finding LUT-LUT pairs...
Info: Packing paired LUTs into a SLICE...
Info: Packing unpaired LUTs into a SLICE...
Info: Packing unpaired FFs into a SLICE...
Info: Generating derived timing constraints...
Info: Promoting globals...
Info:     promoting clock net clk_i$TRELLIS_IO_IN to global network
Info:     promoting clock net clk_9600 to global network
Info: Checksum: 0x18d13ff5

Info: Annotating ports with timing budgets for target frequency 65.00 MHz
Info: Checksum: 0x46065983

Info: Device utilisation:
Info: 	       TRELLIS_SLICE:   235/12144     1%
Info: 	          TRELLIS_IO:     2/  197     1%
Info: 	                DCCA:     2/   56     3%
Info: 	              DP16KD:     0/   56     0%
Info: 	          MULT18X18D:     0/   28     0%
Info: 	              ALU54B:     0/   14     0%
Info: 	             EHXPLLL:     0/    2     0%
Info: 	             EXTREFB:     0/    1     0%
Info: 	                DCUA:     0/    1     0%
Info: 	           PCSCLKDIV:     0/    2     0%
Info: 	             IOLOGIC:     0/  128     0%
Info: 	            SIOLOGIC:     0/   69     0%
Info: 	                 GSR:     0/    1     0%
Info: 	               JTAGG:     0/    1     0%
Info: 	                OSCG:     0/    1     0%
Info: 	               SEDGA:     0/    1     0%
Info: 	                 DTR:     0/    1     0%
Info: 	             USRMCLK:     0/    1     0%
Info: 	             CLKDIVF:     0/    4     0%
Info: 	           ECLKSYNCB:     0/   10     0%
Info: 	             DLLDELD:     0/    8     0%
Info: 	              DDRDLL:     0/    4     0%
Info: 	             DQSBUFM:     0/    8     0%
Info: 	     TRELLIS_ECLKBUF:     0/    8     0%
Info: 	        ECLKBRIDGECS:     0/    2     0%

Info: Placed 2 cells based on constraints.
Info: Creating initial analytic placement for 186 cells, random placement wirelen = 13653.
Info:     at initial placer iter 0, wirelen = 312
Info:     at initial placer iter 1, wirelen = 363
Info:     at initial placer iter 2, wirelen = 314
Info:     at initial placer iter 3, wirelen = 299
Info: Running main analytical placer.
Info:     at iteration #1, type TRELLIS_SLICE: wirelen solved = 314, spread = 1385, legal = 1469; time = 0.02s
Info:     at iteration #2, type TRELLIS_SLICE: wirelen solved = 301, spread = 966, legal = 1105; time = 0.02s
Info:     at iteration #3, type TRELLIS_SLICE: wirelen solved = 318, spread = 734, legal = 923; time = 0.02s
Info:     at iteration #4, type TRELLIS_SLICE: wirelen solved = 349, spread = 802, legal = 958; time = 0.02s
Info:     at iteration #5, type TRELLIS_SLICE: wirelen solved = 311, spread = 725, legal = 930; time = 0.02s
Info:     at iteration #6, type TRELLIS_SLICE: wirelen solved = 360, spread = 742, legal = 951; time = 0.02s
Info:     at iteration #7, type TRELLIS_SLICE: wirelen solved = 319, spread = 734, legal = 956; time = 0.02s
Info:     at iteration #8, type TRELLIS_SLICE: wirelen solved = 360, spread = 725, legal = 902; time = 0.02s
Info:     at iteration #9, type TRELLIS_SLICE: wirelen solved = 410, spread = 736, legal = 936; time = 0.02s
Info:     at iteration #10, type TRELLIS_SLICE: wirelen solved = 378, spread = 696, legal = 877; time = 0.02s
Info:     at iteration #11, type TRELLIS_SLICE: wirelen solved = 442, spread = 716, legal = 910; time = 0.02s
Info:     at iteration #12, type TRELLIS_SLICE: wirelen solved = 444, spread = 711, legal = 936; time = 0.02s
Info:     at iteration #13, type TRELLIS_SLICE: wirelen solved = 482, spread = 720, legal = 919; time = 0.02s
Info:     at iteration #14, type TRELLIS_SLICE: wirelen solved = 477, spread = 743, legal = 929; time = 0.02s
Info:     at iteration #15, type TRELLIS_SLICE: wirelen solved = 446, spread = 733, legal = 934; time = 0.02s
Info: HeAP Placer Time: 0.50s
Info:   of which solving equations: 0.28s
Info:   of which spreading cells: 0.03s
Info:   of which strict legalisation: 0.04s

Info: Running simulated annealing placer for refinement.
Info:   at iteration #1: temp = 0.000000, timing cost = 180, wirelen = 877
Info:   at iteration #5: temp = 0.000000, timing cost = 214, wirelen = 737
Info:   at iteration #10: temp = 0.000000, timing cost = 196, wirelen = 707
Info:   at iteration #15: temp = 0.000000, timing cost = 202, wirelen = 692
Info:   at iteration #16: temp = 0.000000, timing cost = 178, wirelen = 692 
Info: SA placement time 0.57s

Info: Max frequency for clock                       'clk_1': 231.43 MHz (PASS at 65.00 MHz)
Info: Max frequency for clock '$glbnet$clk_i$TRELLIS_IO_IN': 134.83 MHz (PASS at 25.00 MHz)
Info: Max frequency for clock            '$glbnet$clk_9600': 126.55 MHz (PASS at 65.00 MHz)

Info: Max delay posedge $glbnet$clk_9600 -> <async>                 : 3.16 ns
Info: Max delay posedge clk_1            -> posedge $glbnet$clk_9600: 2.94 ns

Info: Slack histogram:
Info:  legend: * represents 1 endpoint(s)
Info:          + represents [1,1) endpoint(s)
Info: [  7482,   8999) |****************************** 
Info: [  8999,  10516) |************ 
Info: [ 10516,  12033) |******* 
Info: [ 12033,  13550) |****************** 
Info: [ 13550,  15067) |******* 
Info: [ 15067,  16584) | 
Info: [ 16584,  18101) | 
Info: [ 18101,  19618) | 
Info: [ 19618,  21135) | 
Info: [ 21135,  22652) | 
Info: [ 22652,  24169) | 
Info: [ 24169,  25686) | 
Info: [ 25686,  27203) | 
Info: [ 27203,  28720) | 
Info: [ 28720,  30237) | 
Info: [ 30237,  31754) | 
Info: [ 31754,  33271) |***************** 
Info: [ 33271,  34788) |************************************************* 
Info: [ 34788,  36305) |******* 
Info: [ 36305,  37822) |***** 
Info: Checksum: 0xac8a4524
Info: Routing globals...
Info:     routing clock net $glbnet$clk_i$TRELLIS_IO_IN using global 0
Info:     routing clock net $glbnet$clk_9600 using global 1

Info: Routing..
Info: Setting up routing queue.
Info: Routing 865 arcs.
Info:            |   (re-)routed arcs  |   delta    | remaining|       time spent     |
Info:    IterCnt |  w/ripup   wo/ripup |  w/r  wo/r |      arcs| batch(sec) total(sec)|
Info:        889 |        8        881 |    8   881 |         0|       0.92       0.92|
Info: Routing complete.
Info: Router1 time 0.92s
Info: Checksum: 0x4a504f7a

Info: Critical path report for clock 'clk_1' (posedge -> posedge):
Info: curr total
Info:  0.5  0.5  Source uart_txbyte_TRELLIS_FF_Q_DI_CCU2C_S0_2$CCU2_SLICE.Q1
Info:  1.2  1.7    Net uart_txbyte[3] budget 4.648000 ns (7,4) -> (7,3)
Info:                Sink uart_txbyte_TRELLIS_FF_Q_LSR_PFUMX_Z_C0_LUT4_Z_SLICE.A1
Info:                Defined in:
Info:                  top.v:38.15-38.26
Info:  0.2  1.9  Source uart_txbyte_TRELLIS_FF_Q_LSR_PFUMX_Z_C0_LUT4_Z_SLICE.F1
Info:  0.4  2.3    Net uart_txbyte_TRELLIS_FF_Q_LSR_PFUMX_Z_C0[4] budget 4.648000 ns (7,3) -> (7,3)
Info:                Sink uart_txbyte_TRELLIS_FF_Q_LSR_PFUMX_Z_SLICE.M0
Info:                Defined in:
Info:                  /usr/local/bin/../share/yosys/ecp5/cells_map.v:109.23-109.24
Info:  0.3  2.6  Source uart_txbyte_TRELLIS_FF_Q_LSR_PFUMX_Z_SLICE.OFX0
Info:  0.6  3.2    Net uart_txbyte_TRELLIS_FF_Q_LSR budget 4.647000 ns (7,3) -> (7,4)
Info:                Sink uart_txbyte_TRELLIS_FF_Q_DI_CCU2C_S0_1$CCU2_SLICE.LSR
Info:  0.4  3.6  Setup uart_txbyte_TRELLIS_FF_Q_DI_CCU2C_S0_1$CCU2_SLICE.LSR
Info: 1.4 ns logic, 2.2 ns routing

Info: Critical path report for clock '$glbnet$clk_i$TRELLIS_IO_IN' (posedge -> posedge):
Info: curr total
Info:  0.5  0.5  Source cntr_9600_TRELLIS_FF_Q_14_SLICE.Q0
Info:  1.1  1.7    Net cntr_9600[17] budget 5.128000 ns (37,5) -> (37,4)
Info:                Sink cntr_9600_LUT4_A_3_SLICE.B1
Info:                Defined in:
Info:                  top.v:23.16-23.25
Info:  0.2  1.9  Source cntr_9600_LUT4_A_3_SLICE.F1
Info:  0.9  2.8    Net cntr_9600_LUT4_A_5_Z[2] budget 5.128000 ns (37,4) -> (36,4)
Info:                Sink clk_9600_TRELLIS_FF_Q_CE_LUT4_Z_SLICE.B1
Info:                Defined in:
Info:                  /usr/local/bin/../share/yosys/ecp5/cells_map.v:109.23-109.24
Info:  0.2  3.0  Source clk_9600_TRELLIS_FF_Q_CE_LUT4_Z_SLICE.F1
Info:  1.4  4.4    Net clk_9600_TRELLIS_FF_Q_CE_LUT4_Z_A[1] budget 5.128000 ns (36,4) -> (33,3)
Info:                Sink cntr_9600_TRELLIS_FF_Q_8_LSR_LUT4_Z_SLICE.C1
Info:                Defined in:
Info:                  /usr/local/bin/../share/yosys/ecp5/cells_map.v:109.23-109.24
Info:  0.2  4.7  Source cntr_9600_TRELLIS_FF_Q_8_LSR_LUT4_Z_SLICE.F1
Info:  0.6  5.2    Net cntr_9600_TRELLIS_FF_Q_8_LSR budget 9.544000 ns (33,3) -> (33,3)
Info:                Sink cntr_9600_TRELLIS_FF_Q_8_SLICE.LSR
Info:  0.4  5.7  Setup cntr_9600_TRELLIS_FF_Q_8_SLICE.LSR
Info: 1.7 ns logic, 4.0 ns routing

Info: Critical path report for clock '$glbnet$clk_9600' (posedge -> posedge):
Info: curr total
Info:  0.5  0.5  Source transmitter.bits_sent_TRELLIS_FF_Q_3_SLICE.Q0
Info:  1.4  1.9    Net transmitter.bits_sent[4] budget 0.000000 ns (7,3) -> (3,2)
Info:                Sink transmitter.bits_sent_CCU2C_B0_1$CCU2_SLICE.B0
Info:                Defined in:
Info:                  top.v:48.17-59.6
Info:                  uart_tx.v:29.14-29.23
Info:  0.4  2.4  Source transmitter.bits_sent_CCU2C_B0_1$CCU2_SLICE.FCO
Info:  0.0  2.4    Net transmitter.bits_sent_CCU2C_B0_3_COUT[6] budget 0.000000 ns (3,2) -> (4,2)
Info:                Sink transmitter.bits_sent_CCU2C_B0$CCU2_SLICE.FCI
Info:                Defined in:
Info:                  top.v:48.17-59.6
Info:                  uart_tx.v:55.37-55.53
Info:                  /usr/local/bin/../share/yosys/ecp5/arith_map.v:38.23-38.25
Info:  0.1  2.4  Source transmitter.bits_sent_CCU2C_B0$CCU2_SLICE.FCO
Info:  0.0  2.4    Net $nextpnr_CCU2C_5$CIN budget 0.000000 ns (4,2) -> (4,2)
Info:                Sink $nextpnr_CCU2C_5$CCU2_SLICE.FCI
Info:  0.4  2.9  Source $nextpnr_CCU2C_5$CCU2_SLICE.F0
Info:  0.6  3.5    Net transmitter.bits_sent_CCU2C_B0_COUT[7] budget 6.430000 ns (4,2) -> (5,3)
Info:                Sink transmitter.bits_sent_LUT4_A_SLICE.D1
Info:                Defined in:
Info:                  /usr/local/bin/../share/yosys/ecp5/cells_map.v:109.23-109.24
Info:  0.2  3.8  Source transmitter.bits_sent_LUT4_A_SLICE.F1
Info:  1.1  4.9    Net transmitter.txbit_TRELLIS_FF_Q_CE_LUT4_Z_C[0] budget 3.321000 ns (5,3) -> (5,4)
Info:                Sink transmitter.buf_tx_TRELLIS_FF_Q_7_CE_LUT4_Z_SLICE.D0
Info:                Defined in:
Info:                  /usr/local/bin/../share/yosys/ecp5/cells_map.v:109.23-109.24
Info:  0.2  5.1  Source transmitter.buf_tx_TRELLIS_FF_Q_7_CE_LUT4_Z_SLICE.F0
Info:  0.7  5.8    Net transmitter.buf_tx_TRELLIS_FF_Q_7_CE budget 3.321000 ns (5,4) -> (6,4)
Info:                Sink transmitter.buf_tx_TRELLIS_FF_Q_2_DI_PFUMX_Z_SLICE.CE
Info:  0.0  5.8  Setup transmitter.buf_tx_TRELLIS_FF_Q_2_DI_PFUMX_Z_SLICE.CE
Info: 2.0 ns logic, 3.8 ns routing

Info: Critical path report for cross-domain path 'posedge $glbnet$clk_9600' -> '<async>':
Info: curr total
Info:  0.5  0.5  Source transmitter.txbit_TRELLIS_FF_Q_CE_LUT4_Z_SLICE.Q1
Info:  1.1  1.7    Net TX$TRELLIS_IO_OUT budget 14.862000 ns (6,3) -> (11,0)
Info:                Sink TX$tr_io.I
Info:                Defined in:
Info:                  top.v:48.17-59.6
Info:                  uart_tx.v:30.9-30.14
Info: 0.5 ns logic, 1.1 ns routing

Info: Critical path report for cross-domain path 'posedge clk_1' -> 'posedge $glbnet$clk_9600':
Info: curr total
Info:  0.5  0.5  Source uart_txbyte_TRELLIS_FF_Q_DI_CCU2C_S0_1$CCU2_SLICE.Q1
Info:  1.0  1.5    Net uart_txbyte[5] budget 14.862000 ns (7,4) -> (6,4)
Info:                Sink transmitter.buf_tx_TRELLIS_FF_Q_2_DI_PFUMX_Z_SLICE.M0
Info:                Defined in:
Info:                  top.v:38.15-38.26
Info:  0.3  1.8  Source transmitter.buf_tx_TRELLIS_FF_Q_2_DI_PFUMX_Z_SLICE.OFX0
Info:  0.1  1.9    Net transmitter.buf_tx_TRELLIS_FF_Q_2_DI budget 3.279000 ns (6,4) -> (6,4)
Info:                Sink transmitter.buf_tx_TRELLIS_FF_Q_2_DI_PFUMX_Z_SLICE.DI0
Info:                Defined in:
Info:                  top.v:48.17-59.6
Info:                  uart_tx.v:37.5-72.8
Info:  0.0  1.9  Setup transmitter.buf_tx_TRELLIS_FF_Q_2_DI_PFUMX_Z_SLICE.DI0
Info: 0.8 ns logic, 1.1 ns routing

Info: Max frequency for clock                       'clk_1': 277.01 MHz (PASS at 65.00 MHz)
Info: Max frequency for clock '$glbnet$clk_i$TRELLIS_IO_IN': 176.37 MHz (PASS at 25.00 MHz)
Info: Max frequency for clock            '$glbnet$clk_9600': 173.61 MHz (PASS at 65.00 MHz)

Info: Max delay posedge $glbnet$clk_9600 -> <async>                 : 1.66 ns
Info: Max delay posedge clk_1            -> posedge $glbnet$clk_9600: 1.87 ns

Info: Slack histogram:
Info:  legend: * represents 1 endpoint(s)
Info:          + represents [1,1) endpoint(s)
Info: [  9624,  11078) |*********************************+
Info: [ 11078,  12532) |***********+
Info: [ 12532,  13986) |******************+
Info: [ 13986,  15440) |*****+
Info: [ 15440,  16894) | 
Info: [ 16894,  18348) | 
Info: [ 18348,  19802) | 
Info: [ 19802,  21256) | 
Info: [ 21256,  22710) | 
Info: [ 22710,  24164) | 
Info: [ 24164,  25618) | 
Info: [ 25618,  27072) | 
Info: [ 27072,  28526) | 
Info: [ 28526,  29980) | 
Info: [ 29980,  31434) | 
Info: [ 31434,  32888) | 
Info: [ 32888,  34342) |*+
Info: [ 34342,  35796) |************************************************************ 
Info: [ 35796,  37250) |*******+
Info: [ 37250,  38704) |***+
ecppack --svf uart_tx.svf uart_tx_out.config uart_tx.bit
